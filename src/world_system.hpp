#pragma once

// internal
#include "common.hpp"
#include "audio_system.hpp"

// stlib
#include <vector>
#include <random>

#define SDL_MAIN_HANDLED
#include <SDL.h>
#include <SDL_mixer.h>

#include "render_system.hpp"
#include "ui_system.hpp"


enum class GameState {
	TITLE_SCREEN,
	CINEMATIC,
	PLAYING
};

// Container for all our entities and game logic.
// Individual rendering / updates are deferred to the update() methods.
class WorldSystem
{
public:
	WorldSystem();

	// creates main window
	GLFWwindow* create_window();

	// call to close the window
	void close_window();

	void progress_timers(float elapsed_ms);

	// starts the game
	void init(RenderSystem* renderer, AudioSystem* audio);

	// releases all associated resources
	~WorldSystem();

	// steps the game ahead by ms milliseconds
	bool step(float elapsed_ms);

	// check for collisions generated by the physics system
	void handle_collisions(float elapsed_ms);

	// should the game be over ?
	bool is_over() const;

	void handle_projectile_collisions(Entity projectile, Entity target);

	void handle_wall_collisions(Entity projectile, Entity target, float elapsed_ms);

	vec2 get_wall_collision_normal(vec2& player_pos, vec2& wall_pos, vec2& size);

	void projectile_hit_wall(Entity projectile, Entity wall);

	bool projectile_hit_door(Motion projectile_motion, vec2 door_loc);

	GameState get_game_state();
	
	void set_game_state(GameState new_game_state);

private:

	float mouse_pos_x = 0.0f;
	float mouse_pos_y = 0.0f;

	// restart level
	void restart_game();

	void display_instruction_images();

	Entity display_given_instruction(vec2 position, TEXTURE_ASSET_ID texture_ID);

	// OpenGL window handle
	GLFWwindow* window;

	// Game state
	RenderSystem* renderer;
	AudioSystem* audio;
	float current_speed;

	// C++ random number generator
	std::default_random_engine rng;
	std::uniform_real_distribution<float> uniform_dist; // number between 0..1

	GameState game_state = GameState::TITLE_SCREEN;
};
